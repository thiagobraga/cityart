#!/bin/bash

# 1. Ignorando a execução deste script
# ===================================================
# Ao realizar um push, alguns parâmetros do Git são enviados para este script
# via stdin. Este script não deve ser executado sempre, então estes parâmetros
# são utilizados para detectar o branch atual e forçar a saída do script quando:
#
# - está criando tags no formato 0.0.0-0 detectadas via REGEX;
# - está fazendo push em branchs que começam com feature, bugfix e hotfix;
# - está fazendo push em stage e develop
# - está deletando branchs remotos, identificados pelo hash 0 repetido 40 vezes.
read -r OLDREV NEWREV REFNAME
[[ $NEWREV =~ "0{40}" ]] && exit
BRANCH=$(git rev-parse --symbolic --abbrev-ref "$REFNAME")
REGEX='^[0-9]+[.][0-9]+[.][0-9]+[-]*[0-9]*$'

[[ $BRANCH =~ $REGEX ]] && exit;
case $BRANCH in
  stage|develop|feature*|bugfix*|hotfix*) exit;;
esac

# 2. Definindo variáveis do projeto
# ===================================================
PROJECT=$(echo $PWD | awk -F'/' '{ print $(NF-1) }')
PROJECT_PATH="/home/ubuntu/projetos/$PROJECT"
BARE_REPOSITORY="${PROJECT_PATH}/.git"

# 3. Clone ou pull do repositório
# ===================================================
# Verifica-se a existência da pasta para o branch atual deste projeto. Caso não
# exista, o repositório é clonado, e se o mesmo já existe, a pasta é acessada,
# então é executado um git pull do branch atual.
if [ ! -d "$PROJECT_PATH/$BRANCH" ]; then
  git clone $BARE_REPOSITORY -b "$BRANCH" "$PROJECT_PATH/$BRANCH"
  cd "$PROJECT_PATH/$BRANCH" || exit
else
  cd "$PROJECT_PATH/$BRANCH" || exit
  unset GIT_DIR
  git checkout -f "$BRANCH" && git pull origin "$BRANCH"
fi

# 4. Deploy do projeto
# ===================================================
export NODE_VERSION=8.12.0
. $HOME/.nvm/nvm.sh
nvm use $NODE_VERSION
npm i
gulp production
